package com.projectgain.manager;

import com.projectgain.dao.WorkCardDAO;
import com.projectgain.dao.WorkGroupDAO;
import com.projectgain.dao.WorkRoutineDAO;
import com.projectgain.models.WorkCard;
import com.projectgain.models.WorkGroup;
import com.projectgain.models.WorkRoutine;
import com.projectgain.models.WorkType;

import java.time.Duration;
import java.util.List;

public class DatabaseManager {
    private WorkRoutineDAO workRoutineDAO;
    private WorkGroupDAO workGroupDAO;
    private WorkCardDAO workCardDAO;

    public DatabaseManager() {
        this.workRoutineDAO = new WorkRoutineDAO();
        this.workGroupDAO = new WorkGroupDAO();
        this.workCardDAO = new WorkCardDAO();
    }

    public List<WorkRoutine> loadWorkRoutinesFromDatabaseLazily(){
        return workRoutineDAO.getWorkRoutines(true);
    }

    public List<WorkRoutine> loadWorkRoutinesFromDatabase(){
        return workRoutineDAO.getWorkRoutines(false);
    }

    public void loadAllRelatedEntities(WorkRoutine workRoutine){
        this.workGroupDAO.loadWorkRoutineEntities(workRoutine);
    }

    public void deleteWorkRoutineRoutine(WorkRoutine workRoutine){
        this.workRoutineDAO.deleteWorkRoutineById(workRoutine.getId());
    }

    public void deleteWorkGroupById(int workGroupId){
        this.workGroupDAO.deleteWorkGroupById(workGroupId);
    }

    public void deleteWorkCardById(int workCardId){
        this.workCardDAO.deleteWorkCardById(workCardId);
    }

    public void saveRoutineFromUser(WorkRoutine workRoutine) {
        int routineIdAutoGeneratedByDB = workRoutineDAO.saveOrUpdateWorkRoutine(workRoutine);
        List<WorkGroup> workGroups = workRoutine.getWorkGroupList();
        List<WorkCard> workCards = null;
        Duration workoutDuration = Duration.ZERO;
        int workGroupIdAutoGeneratedByDB;
        for (WorkGroup wg: workGroups) {
            workGroupIdAutoGeneratedByDB = workGroupDAO.saveOrUpdateWorkGroup(wg, routineIdAutoGeneratedByDB);
            workCards = wg.getWorkCardList();
            Duration currentWorkGroupDuration = Duration.ZERO;
            for (WorkCard wc: workCards) {
                if(wc.getWorkType() == WorkType.REP){
                    Duration currentRepWorkCardDuration = Duration.ofSeconds(wc.getTime().getSecond())
                            .plusMinutes(wc.getTime().getMinute())
                            .plusMinutes(wc.getTime().getHour()).multipliedBy(wc.getReps());
                    currentWorkGroupDuration = currentWorkGroupDuration.plus(currentRepWorkCardDuration);
                }else{
                    Duration currentTimedWorkCardDuration = Duration.ofSeconds(wc.getTime().getSecond())
                            .plusMinutes(wc.getTime().getMinute())
                            .plusMinutes(wc.getTime().getHour());
                    currentWorkGroupDuration = currentWorkGroupDuration.plus(currentTimedWorkCardDuration);
                }
                workCardDAO.saveOrUpdateWorkCard(wc, workGroupIdAutoGeneratedByDB);
            }
            workoutDuration = workoutDuration.plus(currentWorkGroupDuration.multipliedBy(wg.getSets()));
        }
        workRoutineDAO.saveWorkoutDurationById(workoutDuration,routineIdAutoGeneratedByDB);
    }
}
